// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios14.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name DogNetwork
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
@_exported import DogNetwork
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct FetchRandomDogImageRequest {
  public init()
}
public struct Dog : Swift.Codable {
  public let message: Swift.String
  public let status: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public class DogNetworkInterface : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($dogImageURL) public var dogImageURL: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $dogImageURL: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  @Combine.Published @_projectedValueProperty($errorMessage) public var errorMessage: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $errorMessage: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var imageUpdated: Combine.PassthroughSubject<Swift.Void, Swift.Never>
  public init(fetchRandomDogImageUseCase: any DogNetwork.FetchRandomDogImageUseCaseProtocol = FetchRandomDogImageUseCase())
  public func fetchRandomDogImage()
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public protocol FetchRandomDogImageUseCaseProtocol {
  func execute() -> Combine.AnyPublisher<DogNetwork.Dog, any Swift.Error>
}
public class FetchRandomDogImageUseCase : DogNetwork.FetchRandomDogImageUseCaseProtocol {
  public init(repository: any DogNetwork.DogRepositoryProtocol = DogRepository())
  public func execute() -> Combine.AnyPublisher<DogNetwork.Dog, any Swift.Error>
  @objc deinit
}
public protocol DogRepositoryProtocol {
  func fetchRandomDogImage() -> Combine.AnyPublisher<DogNetwork.Dog, any Swift.Error>
}
public class DogRepository : DogNetwork.DogRepositoryProtocol {
  public init(apiService: any DogNetwork.DogAPIServiceProtocol = DogAPIService())
  public func fetchRandomDogImage() -> Combine.AnyPublisher<DogNetwork.Dog, any Swift.Error>
  @objc deinit
}
public struct FetchRandomDogImageResponse : Swift.Codable {
  public let message: Swift.String
  public let status: Swift.String
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol DogAPIServiceProtocol {
  func fetchRandomDogImage(request: DogNetwork.FetchRandomDogImageRequest) -> Combine.AnyPublisher<DogNetwork.FetchRandomDogImageResponse, any Swift.Error>
}
public class DogAPIService : DogNetwork.DogAPIServiceProtocol {
  public init()
  public func fetchRandomDogImage(request: DogNetwork.FetchRandomDogImageRequest) -> Combine.AnyPublisher<DogNetwork.FetchRandomDogImageResponse, any Swift.Error>
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Logger {
  public static let shared: DogNetwork.Logger
  public enum LogLevel : Swift.String {
    case debug
    case info
    case warning
    case error
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public func enableLogging(_ enable: Swift.Bool)
  public func showDetails(_ show: Swift.Bool)
  public func logStart()
  public func logEnd()
  public func log(message: Swift.String, level: DogNetwork.Logger.LogLevel = .info, file: Swift.String = #file, function: Swift.String = #function, line: Swift.Int = #line, alwaysLog: Swift.Bool = false)
  @objc deinit
}
extension DogNetwork.Logger.LogLevel : Swift.Equatable {}
extension DogNetwork.Logger.LogLevel : Swift.Hashable {}
extension DogNetwork.Logger.LogLevel : Swift.RawRepresentable {}
